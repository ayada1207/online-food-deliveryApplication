package com.foodservice.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.management.ServiceNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.foodservice.model.Product;
import com.foodservice.repository.ProductRepository;
import com.foodservice.service.ProductService;
import com.foodservice.service.ProductServiceImpl;

@RestController
@RequestMapping("product")
@CrossOrigin("*")
public class ProductController {
	
	@Autowired
	private ProductRepository productRepo;
	
	@Autowired
	private ProductService productService; 
	
	@GetMapping("/products")
	public List<Product> getAllProduct(){
		return this.productService.findAll();
	}
	
	@PostMapping("/products")
    public Product createProduct(@RequestBody Product product) {
        return productService.save(product);
    }
	
	 // get product by id rest api
    @GetMapping("/products/{id}")
    public ResponseEntity<Product> getproductById(@PathVariable Long id) throws ServiceNotFoundException {
        Product product = productRepo.findById(id)
                .orElseThrow(() -> new ServiceNotFoundException("product not exist with id :" + id));
        return ResponseEntity.ok(product);
    }
    
    @PutMapping("/products/{id}")
    public ResponseEntity<Product> updateProduct(@PathVariable Long id, @RequestBody Product productDetails) throws ServiceNotFoundException{
        Product product = productRepo.findById(id)
                .orElseThrow(() -> new ServiceNotFoundException("product not exist with id :" + id));

        product.setName(productDetails.getName());
        product.setDescription(productDetails.getDescription());
        product.setPrice(productDetails.getPrice());
        product.setImageUrl(productDetails.getImageUrl());


        Product updatedProduct = productRepo.save(product);
        return ResponseEntity.ok(updatedProduct);
    }
    
    @DeleteMapping("/products/{id}")
    public ResponseEntity<Map<String, Boolean>> deleteProduct(@PathVariable Long id) throws ServiceNotFoundException{
        Product product = productRepo.findById(id)
                .orElseThrow(() -> new ServiceNotFoundException("product not exist with id :" + id));

        productRepo.delete(product);
        Map<String, Boolean> response = new HashMap<>();
        response.put("deleted", Boolean.TRUE);
        return ResponseEntity.ok(response);
    }


}
